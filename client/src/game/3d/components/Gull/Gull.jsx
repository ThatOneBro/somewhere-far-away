/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useLayoutEffect, useRef, useContext } from 'react';
import { useGLTF } from '@react-three/drei';

import { Instance, InstanceContext } from '../../../utils/components/Instances/Instances';

// export const GullModel = () => {
//   const { nodes, materials } = useGLTF('/models/Gull.glb');
//   const { ref } = useContext(InstanceContext);
//   useLayoutEffect(() => {
//     if (!nodes || !materials || !ref || !ref.current) return;
//     ref.current.geometry = nodes.Mesh_0.geometry;
//     ref.current.material = materials.Material_1;
//   }, [nodes, materials, ref]);

//   return null;
// };

export default function Model(props) {
  const ref = useRef(null);
  // useEffect(() => {
  //   ref.current.update();
  // }, [position]);
  // const group = useRef(null);
  // const { actions } = useAnimations(animations, group);
  // const ref = useRef();

  // useLayoutEffect(() => {
  //   ref.current.setMatrixAt(0, new THREE.Matrix4());
  // }, []);

  // useEffect(() => {
  //   if (!actions) return;
  //   // eslint-disable-next-line no-underscore-dangle
  //   actions.parrot_A_.play();
  // }, [actions]);

  // return (
  //   // eslint-disable-next-line react/jsx-props-no-spreading
  //   <group ref={group} {...props} dispose={null}>
  //     <instancedMesh
  //       name="Mesh_0"
  //       count={100}
  //       // geometry={nodes.Mesh_0.geometry}
  //       // material={materials.Material_1}
  //       // morphTargetDictionary={nodes.Mesh_0.morphTargetDictionary}
  //       // morphTargetInfluences={nodes.Mesh_0.morphTargetInfluences}
  //       // scale={[0.016, 0.016, 0.016]}
  //       ref={ref}
  //     >
  //       <boxBufferGeometry args={[1, 1, 1]} />
  //       <meshNormalMaterial />
  //     </instancedMesh>
  //   </group>
  // );
  // eslint-disable-next-line react/jsx-props-no-spreading
  return <Instance {...props} ref={ref} />;
}

useGLTF.preload('/models/Gull.glb');
