/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useState, useRef, useEffect } from 'react';
import PropTypes from 'prop-types';
import { useAnimations } from '@react-three/drei';
import { useGraph } from '@react-three/fiber';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import * as THREE from 'three';

import Hat from './Hat';

import { useHandleAnimation } from './useHandleAnimation';

const AnimationHandler = ({ model, fwdRef, moving, jumping }) => {
  const animations = model ? model.animations : null;

  const { actions, clips, mixer } = useAnimations(animations, fwdRef);
  useHandleAnimation(actions, clips, mixer, moving, jumping);

  return null;
};

export const COLORS = {
  // yellow: 0xfddd5c,
  yellow: 0xffcc11,
  orange: 0xff7210,
  red: 0xff2025,
  green: 0x3d9900,
  magenta: 0xdc13ff,
  blue: 0x003166,
  teal: 0x008080,
};

export const TEXT_COLORS = {
  yellow: '#ffda00',
  orange: '#ff7210',
  red: '#fe4e52',
  green: '#54d400',
  magenta: '#db72af',
  blue: '#2d91ff',
  teal: '#00cfcf',
};

export default function Robot({ color, moving, jumping, hat, ...props }) {
  const [threeColor, setThreeColor] = useState(null);
  const [model, setModel] = useState(null);
  const { nodes, materials } = useGraph(model ? model.scene : null);
  const group = useRef(null);
  const hatRef = useRef(null);

  useEffect(() => {
    if (!COLORS[color]) return;
    setThreeColor(new THREE.Color(COLORS[color]));
  }, [color]);

  useEffect(() => new GLTFLoader().load(`/models/Robot/Robot_Yellow.glb`, setModel), []);

  useEffect(() => {
    if (!materials || !materials.Main) return;
    materials.Main.color = threeColor;
  }, [color, materials, threeColor]);

  useEffect(() => {
    if (!nodes || !nodes.Bone) return;
    nodes.Bone.traverse(obj => {
      if (obj.material && obj.material.name === 'Main') {
        // eslint-disable-next-line no-param-reassign
        obj.material.color = threeColor;
      }
    });
  }, [color, nodes, threeColor]);

  useEffect(() => {
    if (!nodes || !nodes.Bone) return;
    if (!hat || !hatRef.current) return;
    nodes.Bone.traverse(obj => {
      if (obj.name === 'Head') {
        console.log(obj);
        obj.add(hatRef.current);
      }
    });
  }, [nodes, hat]);

  return model ? (
    <>
      <AnimationHandler model={model} fwdRef={group} moving={moving} jumping={jumping} />
      {/* eslint-disable-next-line react/jsx-props-no-spreading */}
      <group name="Robot" ref={group} {...props} dispose={null}>
        <Hat type={hat} ref={hatRef} />
        <group rotation={[-Math.PI / 2, 0, 0]} scale={[100, 100, 100]}>
          {nodes.Bone && <primitive object={nodes.Bone} />}
        </group>
        <group position={[0, 2.37, -0.02]} rotation={[-Math.PI / 2, 0, 0]} scale={[100, 100, 100]}>
          <skinnedMesh
            geometry={nodes.HandR_1.geometry}
            material={nodes.HandR_1.material}
            skeleton={nodes.HandR_1.skeleton}
          >
            {/* <meshBasicMaterial color="yellow" /> */}
          </skinnedMesh>
          <skinnedMesh
            geometry={nodes.HandR_2.geometry}
            material={nodes.HandR_2.material}
            skeleton={nodes.HandR_2.skeleton}
          />
        </group>
        <group position={[0, 2.37, -0.02]} rotation={[-Math.PI / 2, 0, 0]} scale={[100, 100, 100]}>
          <skinnedMesh
            geometry={nodes.HandL_1.geometry}
            material={nodes.HandL_1.material}
            skeleton={nodes.HandL_1.skeleton}
          >
            {/* <meshBasicMaterial color="yellow" /> */}
          </skinnedMesh>
          <skinnedMesh
            geometry={nodes.HandL_2.geometry}
            material={nodes.HandL_2.material}
            skeleton={nodes.HandL_2.skeleton}
          />
        </group>
      </group>
    </>
  ) : null;
}

Robot.propTypes = {
  color: PropTypes.string,
  moving: PropTypes.bool,
  jumping: PropTypes.bool,
  hat: PropTypes.string,
};

Robot.defaultProps = {
  color: 'yellow',
  moving: false,
  jumping: false,
  hat: null,
};
